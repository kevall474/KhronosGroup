#_                   _ _ _  _ _____ _  _
#| | _______   ____ _| | | || |___  | || |
#| |/ / _ \ \ / / _` | | | || |_ / /| || |_
#|   <  __/\ V / (_| | | |__   _/ / |__   _|
#|_|\_\___| \_/ \__,_|_|_|  |_|/_/     |_|

#Maintainer: kevall474 <kevall474@tuta.io> <https://github.com/kevall474>

#######################################

#Set compiler to build spirv package
#Set '1' to build with GCC
#Set '2' to build with CLANG
#Default is empty. It will build with GCC. To build with different compiler just use : env _compiler=(1 or 2) makepkg -s
if [ -z ${_compiler+x} ]; then
  _compiler=
fi

#######################################

pkgname=lib32-glslang-git
pkgdesc='OpenGL and OpenGL ES shader front end and validator. (32-bit) (git version)'
pkgver=11.2.0
pkgrel=1
arch=('i686' 'x86_64')
url='https://github.com/KhronosGroup/glslang'
license=(BSD)
makedepends=('make' 'cmake' 'git' 'extra-cmake-modules' 'python' 'ninja' 'clang' 'llvm' 'llvm-libs'
             'gcc' 'gcc-libs' 'lib32-clang' 'lib32-llvm' 'lib32-llvm-libs' 'lib32-gcc-libs' 'lib32-spirv-tools')
depends=('lib32-gcc-libs' 'lib32-llvm-libs' 'lib32-spirv-tools' 'python' 'glslang')
provides=('lib32-glslang' 'lib32-glslang-git')
options=('staticlibs')
source=('glslang::git+https://github.com/KhronosGroup/glslang.git')
md5sums=('SKIP')

pkgver(){
  cd glslang
  echo 11.2.0.$(date -I | sed 's/-/_/' | sed 's/-/_/').$(git rev-list --count HEAD).$(git rev-parse --short HEAD)
}

prepare(){
  cd glslang
  #./update_glslang_sources.py
  git clone https://github.com/KhronosGroup/SPIRV-Tools.git External/spirv-tools
  git clone https://github.com/KhronosGroup/SPIRV-Headers.git External/spirv-tools/external/spirv-headers
  #git clone https://github.com/google/effcee.git External/effcee
  #git clone https://github.com/google/re2.git External/re2
  #git clone https://github.com/google/googletest.git External/googletest # optional
}

build(){
if [[ $_compiler = "1" ]]; then
  export CC="gcc"
  export CXX="g++"
elif [[ $_compiler = "2" ]]; then
  export CC="clang"
  export CXX="clang++"
else
  export CC="gcc"
  export CXX="g++"
fi
export PKG_CONFIG=/usr/bin/i686-pc-linux-gnu-pkg-config

  cd glslang

  rm -rf build_32-{static,shared}

  cmake -H. -G Ninja -Bbuild_32-static \
  -DCMAKE_C_FLAGS=-m32 \
  -DCMAKE_CXX_FLAGS=-m32 \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_INSTALL_LIBDIR=lib32 \
  -DCMAKE_BUILD_TYPE=Release \
  -DBUILD_EXTERNAL=OFF \
  -DBUILD_SHARED_LIBS=OFF \
  -DENABLE_SPVREMAPPER=ON \
  -DENABLE_GLSLANG_BINARIES=ON \
  -DENABLE_GLSLANG_JS=ON \
  -DENABLE_RTTI=ON \
  -DENABLE_EXCEPTIONS=ON \
  -DENABLE_OPT=ON \
  -DENABLE_PCH=ON \
  -DENABLE_CTEST=ON \
  -DUSE_CCACHE=OFF

  cmake -H. -G Ninja -Bbuild_32-shared \
  -DCMAKE_C_FLAGS=-m32 \
  -DCMAKE_CXX_FLAGS=-m32 \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_INSTALL_LIBDIR=lib32 \
  -DCMAKE_BUILD_TYPE=Release \
  -DBUILD_EXTERNAL=OFF \
  -DBUILD_SHARED_LIBS=ON \
  -DENABLE_SPVREMAPPER=ON \
  -DENABLE_GLSLANG_BINARIES=ON \
  -DENABLE_GLSLANG_JS=ON \
  -DENABLE_RTTI=ON \
  -DENABLE_EXCEPTIONS=ON \
  -DENABLE_OPT=ON \
  -DENABLE_PCH=ON \
  -DENABLE_CTEST=ON \
  -DUSE_CCACHE=OFF

  ninja -C build_32-static
  ninja -C build_32-shared
}

package_lib32-glslang-git(){
  DESTDIR="$pkgdir" ninja -C glslang/build_32-static/ install
  DESTDIR="$pkgdir" ninja -C glslang/build_32-shared/ install

  rm -rf "${pkgdir}"/usr/{bin,include,share}

  # install licence
  install -Dm644 "${srcdir}"/glslang/LICENSE.txt "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}
